// Create an initial map object
// Set the longitude, latitude, and the starting zoom level
var myMap = L.map("map").setView([74.52, -125.67], 3);

// Add a tile layer (the background map image) to our map
// Use the addTo method to add objects to our map
L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}", {
  attribution: "© <a href='https://www.mapbox.com/about/maps/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> <strong><a href='https://www.mapbox.com/map-feedback/' target='_blank'>Improve this map</a></strong>",
  tileSize: 512,
  maxZoom: 18,
  zoomOffset: -1,
  id: "mapbox/streets-v11",
  accessToken: API_KEY
}).addTo(myMap);


var line1 = [
  [ 74.005, -125.453],
  [ 74.325, -125.857],
  [ 74.099, -125.188],
  [ 74.148, -125.214],
  [ 73.47, -125.055],
  [ 73.45, -125.002],
  [ 73.426, -125.114]
  
];
L.polyline(line1, {
  color: "green"
}).addTo(myMap);

var line2 = [
  [ 69.409, -137.462],
  [ 69.424, -137.283],
  [ 69.686, -138.752],
  [ 69.735, -138.622],
  [ 69.793, -139.598],
  [ 69.73, -139.31],
  [ 69.697, -139.317],
  [ 69.839, -139.165],
  [ 69.738, -138.176],
  [ 69.774, -141.388],
  [ 69.741, -139.887],
  [ 70.473, -146.346],
  [ 70.136, -145.193],
  [ 70.437, -144.391],
  [ 70.432, -144.418],
  [ 70.697, -145.591],
  [ 70.943, -143.391],
  [ 70.868, -142.814],
  [ 70.145, -143.61],
  [ 70.151, -143.618],
  [ 70.164, -143.316],
  [ 69.624, -140.243],
  [ 69.64, -140.342],
  [ 70.529, -145.19],
  [ 70.266, -145.184],
  [ 70.127, -143.937],
  [ 70.142, -143.678],
  [ 70.286, -144.235],
  [ 70.32, -144.598],
  [ 70.169, -144.977],
  [ 70.137, -144.747],
  [ 70.179, -143.33],
  [ 70.03, -142.068],
  [ 69.809, -140.82],
  [ 69.656, -140.251],
  [ 69.629, -139.296],
  [ 69.276, -137.486],
  [ 69.419, -137.182],
  [ 69.458, -136.916],
  [ 69.788, -136.323],
  [ 69.887, -136.694],
  [ 69.983, -136.888],
  [ 69.927, -137.056],
  [ 69.567, -137.944],
  [ 69.614, -139.564],
  [ 69.648, -138.975],
  [ 69.641, -138.932],
  [ 69.705, -138.981],
  [ 69.716, -138.995],
  [ 69.78, -139.705],
  [ 69.774, -139.681],
  [ 69.87, -140.462],
  [ 69.888, -140.337],
  [ 69.826, -140.637],
  [ 69.737, -140.262],
  [ 69.702, -139.97],
  [ 69.692, -140.008],
  [ 69.671, -139.753],
  [ 69.669, -139.671],
  [ 69.654, -139.809],
  [ 69.649, -139.367],
  [ 69.643, -139.118],
  [ 69.64, -139.153],
  [ 69.993, -139.19],
  [ 70.013, -139.291],
  [ 69.735, -139.505],
  [ 69.74, -139.477],
  [ 69.363, -136.646],
  [ 69.358, -136.632],
  [ 69.794, -140.537],
  [ 69.782, -139.859],
  [ 69.761, -139.76],
  [ 69.74, -139.484],
  [ 69.721, -139.544],
  [ 69.63, -140.097],
  [ 69.625, -140.276],
  [ 70.107, -140.736],
  [ 69.912, -140.982],
  [ 69.834, -141.105],
  [ 69.85, -141.046],
  [ 69.656, -139.062],
  [ 69.646, -138.518],
  [ 69.944, -141.087],
  [ 70.052, -141.252],
  [ 70.034, -141.961],
  [ 69.851, -140.914],
  [ 69.6, -140.135],
  [ 70.364, -141.654]  
  
];

// Create a polyline using the line coordinates and pass in some initial options
L.polyline(line2, {
  color: "blue"
}).addTo(myMap);

var line3 = [
  [ 70.761, -147.623],
  [ 70.671, -147.577],
  [ 70.719, -147.538],
  [ 70.761, -147.504],
  [ 70.832, -146.415],
  [ 70.806, -146.473],
  [ 70.812, -146.053],
  [ 70.858, -146.042],
  [ 70.884, -145.763],
  [ 70.874, -145.832],
  [ 70.879, -146.704],
  [ 70.708, -147.305],
  [ 70.697, -147.363],
  [ 70.773, -147.209],
  [ 70.834, -147.391],
  [ 70.76, -146.785],
  [ 70.743, -146.699],
  [ 70.759, -146.801],
  [ 70.707, -146.675],
  [ 70.662, -146.793],
  [ 70.606, -146.769],
  [ 70.483, -146.42],
  [ 70.512, -146.082],
  [ 70.537, -145.951],
  [ 70.657, -145.709],
  [ 70.744, -145.255],
  [ 70.802, -143.97],
  [ 70.778, -143.333],
  [ 70.764, -142.721],
  [ 70.827, -142.709],
  [ 70.874, -142.726],
  [ 71.122, -144.754],
  [ 71.458, -146.074],
  [ 71.972, -147.398],
  [ 71.984, -147.604],
  [ 72.441, -147.948],
  [ 72.482, -148.104],
  [ 72.261, -147.433],
  [ 72.24, -147.29],
  [ 72.028, -147.051],
  [ 71.493, -146.482],
  [ 71.39, -146.009],
  [ 70.923, -145.398],
  [ 70.795, -145.186],
  [ 70.455, -146.18],
  [ 70.44, -146.324],
  [ 70.335, -146.048],
  [ 70.31, -145.622],
  [ 70.299, -145.822],
  [ 70.33, -145.478],
  [ 70.184, -145.44],
  [ 70.281, -145.441],
  [ 70.332, -145.305],
  [ 70.365, -146.005],
  [ 70.388, -145.925],
  [ 70.333, -145.318],
  [ 70.336, -145.19],
  [ 70.347, -145.164],
  [ 70.345, -145.166],
  [ 70.347, -144.969],
  [ 70.38, -144.762],
  [ 70.38, -144.775],
  [ 70.686, -144.687],
  [ 71.066, -144.963],
  [ 71.102, -144.762],
  [ 71.395, -144.91],
  [ 71.469, -145.001],
  [ 72.003, -144.78],
  [ 72.332, -144.471],
  [ 73.272, -144.634],
  [ 73.754, -145.624],
  [ 73.769, -145.835],
  [ 73.904, -147.348],
  [ 74.139, -149.043],
  [ 74.142, -149.239],
  [ 74.191, -149.295],
  [ 73.894, -148.677],
  [ 74.264, -150.154],
  [ 74.248, -149.936],
  [ 74.039, -150.073],
  [ 74.034, -150.221],
  [ 73.931, -150.063],
  [ 73.845, -150.114],
  [ 73.799, -150.507],
  [ 73.812, -151.028],
  [ 73.815, -151.138],
  [ 73.813, -151.134],
  [ 73.857, -150.851],
  [ 73.595, -151.586],
  [ 73.645, -151.939],
  [ 73.668, -151.739],
  [ 73.652, -152.23],
  [ 73.663, -151.775],
  [ 73.243, -152.64],
  [ 72.506, -153.396],
  [ 72.542, -152.824],
  [ 72.542, -152.918],
  [ 72.573, -153.696],
  [ 72.138, -154.919],
  [ 71.872, -156.507],
  [ 71.739, -156.605],
  [ 72.091, -158.663]  
  
];
L.polyline(line3, {
  color: "green"
}).addTo(myMap);


d3.json("bears.json", function(data) {
  console.log(data);
});



// function buildPlot() {
//   var url = `bears.json`;



//   d3.json(url).then(function(data) {

//     // Grab values from the response json object to build the plots
//     var name = data[1].bearID_mcp;
//     // var stock = data.dataset.dataset_code;
//     // var startDate = data.dataset.start_date;
//     // var endDate = data.dataset.end_date;
//     // var dates = unpack(data.dataset.data, 0);
//     // var openingPrices = unpack(data.dataset.data, 1);
//     // var highPrices = unpack(data.dataset.data, 2);
//     // var lowPrices = unpack(data.dataset.data, 3);
//     // var closingPrices = unpack(data.dataset.data, 4);

//   console.log(name);
//   });
// };
console.log("Test")
// var bearData ="bears.json";
// Perform a GET request to the query URL
// d3.json(bearData, function(data) {
//   // Once we get a response, send the data.features object to the createFeatures function
//  console.log(data);
// });

// console.log("bears.json")

// new_list=[]
// for each_bear in bearData['1']:
//   new_list.append([each_bear['latitude_mcp'], each_bear['longitude_mcp']]








// var marker = function(location){
//   for (var i = 0; i<location.length; i++)


//   [74.005, -125.453],
//   [74.325, -125.857],
//   [74.099, -125.188],
//   [74.148, -125.214],
//   [73.47, -125.055],
//   [73.45, -125.002]
// ];

// // Create a polyline using the line coordinates and pass in some initial options
// L.polyline(line, {
//   color: "red"
// }).addTo(myMap);